<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tcp on Erlang &amp; Go</title>
    <link>https://jeidee.github.io/tags/tcp/</link>
    <description>Recent content in Tcp on Erlang &amp; Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 19 Aug 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeidee.github.io/tags/tcp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go tcp &#43; json decoder 사용하기</title>
      <link>https://jeidee.github.io/2015/08/19/go-tcp-json-decoder-ec82acec9aa9ed9598eab8b0/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/2015/08/19/go-tcp-json-decoder-ec82acec9aa9ed9598eab8b0/</guid>
      <description>다음 코드는 클라이언트에서 보낸 json 패킷을 디코딩하는 간단한 tcp 서버 예제코드이다.
 package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net&amp;quot; ) func main() { ln, err := net.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;:9080&amp;quot;) if err != nil { log.Fatal(err) return } defer ln.Close() for { c, err := ln.Accept() if err != nil { log.Fatalln(&amp;quot;Can&#39;t accept new client!&amp;quot;, err) return } defer c.Close() go requestHandler(c) } } type Packet struct { Id int16 \`json:&amp;quot;id&amp;quot;\` Data interface{} \`json:&amp;quot;data&amp;quot;\` } func requestHandler(c net.</description>
    </item>
    
  </channel>
</rss>