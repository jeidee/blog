<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coroutine on Erlang &amp; Go</title>
    <link>https://jeidee.github.io/tags/coroutine/</link>
    <description>Recent content in Coroutine on Erlang &amp; Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 01 Sep 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeidee.github.io/tags/coroutine/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go coroutines 패턴 구현하기</title>
      <link>https://jeidee.github.io/2015/09/01/go-coroutines-ed8ca8ed84b4-eab5aced9884ed9598eab8b0/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/2015/09/01/go-coroutines-ed8ca8ed84b4-eab5aced9884ed9598eab8b0/</guid>
      <description>coroutine은 쓰레드와 유사하다고 볼 수 있다.
다른점은, 쓰레드가 동시에 여러쓰레드에서 병렬적으로 실행된다면, coroutine은 병행성은 갖지만, 특정 시점에 단 하나의 coroutine만 실행됨을 보증한다는 것이다.
goroutine과 coroutine의 차이를 다음과 같이 구분할 수 있다.
 goroutine은 병렬적이지만 coroutine은 그렇지 않다. goroutine간에는 채널을 통해 통신하며, coroutine간에는 yield와 resume 동작에 의해 통신한다.  c#에서는 yield 키워드를 통해서 iterator를 구현할 때 주로 사용하며, 유니티의 coroutine은 이러한 yield키워드를 사용해서 메인쓰레드에서 여러 함수를 동시에 실행시키는데 사용한다.
csharp public class PowersOf2 { static void Main() { // Display powers of 2 up to the exponent of 8: foreach (int i in Power(2, 8)) { Console.</description>
    </item>
    
  </channel>
</rss>