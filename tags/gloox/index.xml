<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gloox on Erlang &amp; Go</title>
    <link>https://jeidee.github.io/tags/gloox/</link>
    <description>Recent content in Gloox on Erlang &amp; Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 02 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeidee.github.io/tags/gloox/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gloox xmppPing</title>
      <link>https://jeidee.github.io/2015/06/02/gloox-xmppping/</link>
      <pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/2015/06/02/gloox-xmppping/</guid>
      <description>gloox의 경우 tcp 연결이 비정상적으로 종료되었을 때 disconnect를 감지할 수 없는 경우가 있다.
이럴 경우를 대비해 xmpp 서버에 주기적으로 ping을 보내고 pong을 수신해서 연결 상태를 관리하는 것이 좋다.
class MsgClient : public MessageSessionHandler , &amp;amp;#8230; , EventHandler { private: int m_heartBeat; }; void MsgClient::heartBeat() { m\_client-&amp;gt;xmppPing(m\_client-&amp;gt;jid(), this); if (++m_heartBeat &amp;gt; 3) { LOGD(&amp;quot;허트비트 무응답 초과로 연결 종료!&amp;quot;); m_client-&amp;gt;disconnect(); } } void MsgClient::handleEvent(const Event&amp;amp; event) { switch (event.eventType()) { case Event::PingPing: LOGD(&amp;quot;PingPing&amp;quot;); break; case Event::PingPong: LOGD(&amp;quot;PingPong&amp;quot;); &amp;amp;#8211;m_heartBeat; break; case Event::PingError: LOGE(&amp;quot;PingError&amp;quot;); break; default: break; } return; } // ConnectionListener void MsgClient::onConnect() { LOGD(&amp;quot;connected!</description>
    </item>
    
    <item>
      <title>gloox for android</title>
      <link>https://jeidee.github.io/2015/04/21/gloox-for-android/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/2015/04/21/gloox-for-android/</guid>
      <description>gloox를 android에서 사용하기 위한 과정을 살펴보자.
사전 준비 작업 다음과 같은 환경이 구축되어 있다고 가정한다.
 개발 환경 : Mac OS X Yosemite 10.10.3 Android Studio : 1.1.0  Android SDK 경로는 ~/Android/sdk로 변경  NDK  ~/Android/ndk에 복사하고 path 지정   Android Studio에 ndk 설정 Preference &amp;gt; External Tools에서 + 버튼을 클릭해 javah, ndk-build, ndk-build clean 도구를 추가한다.
1) javah
2) ndk-build
3) ndk-build clean
Android Project 생성후 NDK 테스트 1) GlooxForAndroid 이름을 갖는 Android Project를 생성한다.</description>
    </item>
    
  </channel>
</rss>