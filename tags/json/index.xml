<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on Erlang &amp; Go</title>
    <link>https://jeidee.github.io/tags/json/</link>
    <description>Recent content in Json on Erlang &amp; Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Aug 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeidee.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go json 디코더를 사용해서 TCP 스트림으로 수신한 json object 처리하기</title>
      <link>https://jeidee.github.io/2015/08/25/go-json-eb9494ecbd94eb8d94eba5bc-ec82acec9aa9ed95b4ec849c-tcp-ec8aa4ed8ab8eba6bcec9cbceba19c-ec8898ec8ba0ed959c-json-object-ecb298eba6aced9598/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/2015/08/25/go-json-eb9494ecbd94eb8d94eba5bc-ec82acec9aa9ed95b4ec849c-tcp-ec8aa4ed8ab8eba6bcec9cbceba19c-ec8898ec8ba0ed959c-json-object-ecb298eba6aced9598/</guid>
      <description>우선 net.Conn 인스턴스(c.conn은 net.Conn 인스턴스)를 사용해서 json 디코더를 생성한다.
 d := json.NewDecoder(c.conn)  수신받은 데이터를 json 오브젝트로 디코딩한다.
 var packet map[string]interface{} err := d.Decode(&amp;amp;packet)  json 오브젝트를 특정 구조체 데이터로 캐스팅한다.
그 전에 송수신 하는 json 오브젝트에 id필드가 있다고 가정하며,
id필드 값에 따라 다른 구조체로 캐스팅하도록 한다.
 type ReqLoginPacket struct { Id int \`json:&amp;quot;id&amp;quot;\` UserId string \`json:&amp;quot;user_id&amp;quot;\` } pid := int(p[&amp;quot;id&amp;quot;].(float64)) switch pid { case 1: reqPacket := new(ReqLoginPacket) MapToObject(packet, reqPacket) &amp;amp;#8230; }  MapToObject/2 함수는 다음과 같다.</description>
    </item>
    
    <item>
      <title>go tcp &#43; json decoder 사용하기</title>
      <link>https://jeidee.github.io/2015/08/19/go-tcp-json-decoder-ec82acec9aa9ed9598eab8b0/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/2015/08/19/go-tcp-json-decoder-ec82acec9aa9ed9598eab8b0/</guid>
      <description>다음 코드는 클라이언트에서 보낸 json 패킷을 디코딩하는 간단한 tcp 서버 예제코드이다.
 package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net&amp;quot; ) func main() { ln, err := net.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;:9080&amp;quot;) if err != nil { log.Fatal(err) return } defer ln.Close() for { c, err := ln.Accept() if err != nil { log.Fatalln(&amp;quot;Can&#39;t accept new client!&amp;quot;, err) return } defer c.Close() go requestHandler(c) } } type Packet struct { Id int16 \`json:&amp;quot;id&amp;quot;\` Data interface{} \`json:&amp;quot;data&amp;quot;\` } func requestHandler(c net.</description>
    </item>
    
  </channel>
</rss>