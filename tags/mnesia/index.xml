<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mnesia on Erlang &amp; Go</title>
    <link>https://jeidee.github.io/tags/mnesia/</link>
    <description>Recent content in Mnesia on Erlang &amp; Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Feb 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeidee.github.io/tags/mnesia/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mnesia 기초 1/4</title>
      <link>https://jeidee.github.io/2015/02/14/mnesia-eab8b0ecb488-14/</link>
      <pubDate>Sat, 14 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/2015/02/14/mnesia-eab8b0ecb488-14/</guid>
      <description>레코드 레코드는 튜플의 특별한 형태로 메타데이터를 정의할 수 있는 튜플이라고 할 수 있다.
레코드 정의는 다음과 같이 할 수 있다.
 -record(레코드명, {컬럼명 = 기본값 :: 데이터타입, &amp;amp;#8230;.}).  레코드명과 컬럼명은 atom 타입이며 기본값은 값을 지정하지 않았을 때 입력되는 기본값이다.
:: 뒤의 데이터타입은 컬럼의 데이터타입을 기술할 수 있고 다음과 같은 형태로 정의할 수 있다.
기본 데이터타입  binary() : 바이너리 데이터타입 string() : 문자열 데이터타입 integer() : 정수형 데이터타입 &amp;#8230;  이 외에도 다음과 같이 직접 데이터타입을 정의해서 사용할 수 있다.</description>
    </item>
    
    <item>
      <title>mnesia 기초 2/4 &amp;#8211; Match Spec</title>
      <link>https://jeidee.github.io/2015/02/14/mnesia-eab8b0ecb488-24-match-spec/</link>
      <pubDate>Sat, 14 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/2015/02/14/mnesia-eab8b0ecb488-24-match-spec/</guid>
      <description>Match Spec mnesia:select 또는 mnesia:dirty_select에 Match Spec을 정의해서 데이터를 검색할 수 있다.
MatchSpec의 기본형은 다음과 같다.
[{ {매치패턴}, [조건식], [결과값]}]  매치패턴은 튜플의 형태로 테이블의 레코드의 구조와 동일해야한다.
[{ {&#39;$1&#39;, &#39;$2&#39;, &amp;amp;#8230;}, [], &amp;amp;#8230;  $1, $2는 바인드 변수이며 Match Spec안에서만 사용된다.
조건식은 다음과 같이 논리연산자, 비교컬럼지정자, 검색값 형식으로 입력한다.
[&#39;&amp;gt;&#39;, &#39;$1&#39;, &amp;quot;abcd&amp;quot;]  예를 들면 다음과 같다.
-type my_color() :: red | yellow | blue; -record(shape, {name = &amp;quot;&amp;quot; :: string(), color = red :: fruit_color(), count = 0 :: integer()}).</description>
    </item>
    
    <item>
      <title>mnesia 기초 3/4 &amp;#8211; Getting Started with Mnesia 1/2</title>
      <link>https://jeidee.github.io/2015/02/14/mnesia-eab8b0ecb488-34-getting-started-with-mnesia-1/</link>
      <pubDate>Sat, 14 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/2015/02/14/mnesia-eab8b0ecb488-34-getting-started-with-mnesia-1/</guid>
      <description>Erlang 공식 문서 중에 Getting Started with Mnesia문서를 기준으로 몇몇내용을 추가해 다음과 같이 작성해 보았다.
mnesia 시작 mnesia를 시작하기 위해서 다음의 과정이 필요하다.
 erlang node에 mnesia의 데이터가 저장될 경로를 지정하여 erlang shell을 시작한다. 새로운 빈 스키마를 생성한다. 스키마는 데이터베이스의 정보를 포함한다. mnesia DBMS를 시작한다. 테이블을 생성한다. 데이터베이스 정보를 조회한다.  위의 과정을 수행하기 위해 다음과 같이 따라해 보자.
 $ erl -mnesia dir &#39;&amp;quot;tmp/funky&amp;quot;&#39;  tmp/funky 디렉토리에 mnesia 데이터가 저장되도록 -mnesia dir 옵션을 사용해 erlang shell을 시작한다.</description>
    </item>
    
    <item>
      <title>mnesia 기초 4/4 &amp;#8211; Getting Started with Mnesia 2/2</title>
      <link>https://jeidee.github.io/2015/02/14/mnesia-eab8b0ecb488-44-getting-started-with-mnesia-22/</link>
      <pubDate>Sat, 14 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/2015/02/14/mnesia-eab8b0ecb488-44-getting-started-with-mnesia-22/</guid>
      <description>데이터 추가 테이블에 데이터를 추가하기 위해서는 트랜잭션을 사용해야 한다. 트랜잭션은 매개변수가 없는 익명의 fun에 여러 DB 오퍼레이션을 묶어 생성할 수 있다.
테이블에 데이터를 입력할 때는 mnesia:write/1 함수를 사용할 수 있으면 매개변수는 레코드를 사용한다.
insert_emp(Emp, DeptId, ProjNames) -&amp;gt; Ename = Emp#employee.name, Fun = fun() -&amp;gt; mnesia:write(Emp), AtDep = #at\_dep{emp = Ename, dept\_id = DeptId}, mnesia:write(AtDep), mk_projs(Ename, ProjNames) end, mnesia:transaction(Fun). mk_projs(Ename, [ProjName|Tail]) -&amp;gt; mnesia:write(#in\_proj{emp = Ename, proj\_name = ProjName}), mk_projs(Ename, Tail); mk\_projs(\_, []) -&amp;gt; ok.</description>
    </item>
    
  </channel>
</rss>