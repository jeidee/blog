<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http on Erlang &amp; Go</title>
    <link>https://jeidee.github.io/blog/tags/http/</link>
    <description>Recent content in Http on Erlang &amp; Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Oct 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeidee.github.io/blog/tags/http/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go RESTful API 구현</title>
      <link>https://jeidee.github.io/blog/2015/10/13/go-restful-api-eab5aced9884/</link>
      <pubDate>Tue, 13 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/10/13/go-restful-api-eab5aced9884/</guid>
      <description>예제  package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; ) type ResponseResult struct { Result string \`json:&amp;quot;result&amp;quot;\` Message string \`json:&amp;quot;message&amp;quot;\` } type ApiServer struct { } func (as *ApiServer) Start() { http.HandleFunc(&amp;quot;/&amp;quot;, as.index) addr := fmt.Sprintf(&amp;quot;:%v&amp;quot;, 8080) fmt.Printf(&amp;quot;API Server is listening on %v&amp;quot;, addr) err := http.ListenAndServe(addr, nil) if err != nil { fmt.Printf(&amp;quot;%v&amp;quot;, err) } } func (as \*ApiServer) index(w http.ResponseWriter, r \*http.Request) { w.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;) json.NewEncoder(w).Encode(ResponseResult{Result: &amp;quot;400&amp;quot;, Message: &amp;quot;Bad request&amp;quot;}) } func main() { as := ApiServer{} as.</description>
    </item>
    
    <item>
      <title>go http 요청 처리</title>
      <link>https://jeidee.github.io/blog/2015/09/03/go-http-ec9a94ecb2ad-ecb298eba6ac/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/09/03/go-http-ec9a94ecb2ad-ecb298eba6ac/</guid>
      <description>net/http 패키지를 사용하면 된다.
REST API를 사용하는 간단한 예제는 다음과 같다.
 package main import ( &amp;quot;net/http&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;encoding/json&amp;quot; ) func main() { r, err := http.Get(&amp;quot;https://example.com/api/&amp;amp;#8230;&amp;quot;) if err != nil { fmt.Println(err) return } defer r.Body.Close() var body []byte body, err = ioutil.ReadAll(r.Body) if err != nil { fmt.Println(err) return } var m map[string]interface{} json.Unmarshal(body, &amp;amp;m) fmt.Println(&amp;quot;body is &amp;quot;, m) }  Response가 JSON 문자열일 경우 json.Unmarshal() 함수를 사용해 map[string]interface{} 타입으로 변환할 수 있다.</description>
    </item>
    
    <item>
      <title>ejabberd http request handlers</title>
      <link>https://jeidee.github.io/blog/2015/01/21/ejabberd-http-request-handlers/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/01/21/ejabberd-http-request-handlers/</guid>
      <description>ejabberd 모듈 개발 문서 중에 http request handlers 개발 관련해서 간단히 정리해 봅니다.
튜토리얼 &amp;#8220;/hello&amp;#8221;로 시작하는 URL에 대한 모든 요청을 처리하기 위해 &amp;#8220;mod_http_hello&amp;#8221;를 작성한다고 가정해 봅시다, 다음과 같이:
 http://localhost:5280/hello/world http://localhost:5280/hello/hedgehog  process/2 함수의 절을 갖는 request 핸들러를 포함하는 &amp;#8220;mod_http_hello.erl&amp;#8221;파일을 작성하는 것으로 시작합니다.
&amp;#8220;/hello/world&amp;#8221; 요청을 처리하는 예는 다음과 같습니다:
process(\_LocalPath = [&amp;quot;world&amp;quot;], \_Request) -&amp;gt; {xmlelement, &amp;quot;html&amp;quot;, [{&amp;quot;xmlns&amp;quot;, &amp;quot;http://www.w3.org/1999/xhtml&amp;quot;}], [{xmlelement, &amp;quot;head&amp;quot;, [], [{xmlelement, &amp;quot;title&amp;quot;, [], []}]}, {xmlelement, &amp;quot;body&amp;quot;, [], [{xmlelement, &amp;quot;p&amp;quot;, [], [{xmlcdata, &amp;quot;Hello, world!</description>
    </item>
    
  </channel>
</rss>