<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rest Api on Erlang &amp; Go</title>
    <link>http://jeidee.github.io/tags/rest-api/</link>
    <description>Recent content in Rest Api on Erlang &amp; Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Oct 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jeidee.github.io/tags/rest-api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go RESTful API 구현</title>
      <link>http://jeidee.github.io/2015/10/13/go-restful-api-eab5aced9884/</link>
      <pubDate>Tue, 13 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jeidee.github.io/2015/10/13/go-restful-api-eab5aced9884/</guid>
      <description>예제  package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; ) type ResponseResult struct { Result string \`json:&amp;quot;result&amp;quot;\` Message string \`json:&amp;quot;message&amp;quot;\` } type ApiServer struct { } func (as *ApiServer) Start() { http.HandleFunc(&amp;quot;/&amp;quot;, as.index) addr := fmt.Sprintf(&amp;quot;:%v&amp;quot;, 8080) fmt.Printf(&amp;quot;API Server is listening on %v&amp;quot;, addr) err := http.ListenAndServe(addr, nil) if err != nil { fmt.Printf(&amp;quot;%v&amp;quot;, err) } } func (as \*ApiServer) index(w http.ResponseWriter, r \*http.Request) { w.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;) json.NewEncoder(w).Encode(ResponseResult{Result: &amp;quot;400&amp;quot;, Message: &amp;quot;Bad request&amp;quot;}) } func main() { as := ApiServer{} as.</description>
    </item>
    
    <item>
      <title>node.js express로 rest api 구현하기</title>
      <link>http://jeidee.github.io/2015/01/22/node-js-expresseba19c-rest-api-eab5aced9884ed9598eab8b0/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jeidee.github.io/2015/01/22/node-js-expresseba19c-rest-api-eab5aced9884ed9598eab8b0/</guid>
      <description>express의 url 라우팅 처리 방식 살펴보기 express로 프로젝트를 생성 후 app.js를 열어 보자.
소스에서 다음과 같은 내용을 찾는다.
var routes = require(&#39;./routes/index&#39;); var users = require(&#39;./routes/users&#39;); &amp;amp;#8230; app.use(&#39;/&#39;, routes); app.use(&#39;/users&#39;, users);  먼저 24라인은 html view engine과 관계가 있으므로 스킵하고 25라인을 살펴보자.
25번 라인이 의미하는 바는 다음과 같다.
 http://localhost:3000/users 이하 url이 입력되면 users object에서 처리한다.  users object는 9번 라인에서 ./routes/users(.js) 모듈에서 가져왔는데, 해당 모듈의 소스는 다음과 같다.</description>
    </item>
    
    <item>
      <title>ejabberd node.js웹에서 ejabberd http api 호출하기</title>
      <link>http://jeidee.github.io/2015/01/21/ejabberd-node-jsec9bb9ec9790ec849c-ejabberd-http-api-ed98b8ecb69ced9598eab8b0/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jeidee.github.io/2015/01/21/ejabberd-node-jsec9bb9ec9790ec849c-ejabberd-http-api-ed98b8ecb69ced9598eab8b0/</guid>
      <description>ejabberd rest api를 위한 http 커스텀 모듈 ejabberd 의 http 커스텀 모듈을 mod_http_api.erl로 만들었다고 가정한다.
(mod_http_api.erl 관련 내용은 이전의 Post에서 참조)
http://localhost:5280/api/session/list URI를 호출했을 때 동작하는 API를 만들기 위해 mod_http_api.erl에 다음과 같이 추가한다.
process([&amp;lt;&amp;lt;&amp;quot;session&amp;quot;&amp;gt;&amp;gt;, &amp;lt;&amp;lt;&amp;quot;list&amp;quot;&amp;gt;&amp;gt;], _Request) -&amp;gt; session\_list(\_Request);  session_list/1 함수는 내부 함수이며 다음과 같다.
session\_list(\_Request) -&amp;gt; ?DEBUG(&amp;quot;session\_list() \_Request is ~p~n&amp;quot;, [_Request]), List = mod\_admin\_extra:connected\_users\_info(), Y = [X || {[X,\_,\_,\_,\_], \_, \_, \_, \_, \_, \_} &amp;lt;- List], Y1 = {[{list, Y}]}, Result1 = jiffy:encode(Y1), Result2 = to_bin(&amp;quot;~s&amp;quot;, [Result1]), {200, ?</description>
    </item>
    
  </channel>
</rss>