<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debug on Erlang &amp; Go</title>
    <link>http://jeidee.github.io/blog/tags/debug/</link>
    <description>Recent content in Debug on Erlang &amp; Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Sep 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jeidee.github.io/blog/tags/debug/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go debug hang</title>
      <link>http://jeidee.github.io/blog/2015/09/30/go-debug-hang/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jeidee.github.io/blog/2015/09/30/go-debug-hang/</guid>
      <description>go로 만든 어플리케이션이 hang에 걸렸을 경우 다음과 같이 해당 프로세스의 스택을 추적할 수 있다.
 $ kill -ABRT process-id  </description>
    </item>
    
    <item>
      <title>erlang debug</title>
      <link>http://jeidee.github.io/blog/2015/02/06/erlang-debug/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jeidee.github.io/blog/2015/02/06/erlang-debug/</guid>
      <description>erlang에서 디버깅하는 방법은 다음과 같다.
 주의할 것은 erlang 설치 전에 wxWiget 라이브러리를 먼저 설치한 후 erlang을 설치해야 한다는 것이다. 관련 설치방법은 erlang/otp 설치 문서를 참고!  erl 노드를 실행시킨 후 debugger monitor를 실행시킨다.
 &amp;gt; debugger:start().  Monitor윈도가 실행되면 Module &amp;gt; Interpret 메뉴를 선택한다.
파일 선택기에서 디버깅하고자 하는 .erl 파일을 선택한다.
반드시 erl 노드가 import한 모듈의 소스여야 한다.
예를 들어 ejabberd의 디버그 쉘을 실행시킨 후 디버깅할 수 있는 모듈은 ejabberd 모듈에 한정된다.</description>
    </item>
    
    <item>
      <title>ejabberd 디버그 모드로 ejabberd  core 모듈 테스트해 보기</title>
      <link>http://jeidee.github.io/blog/2015/01/21/ejabberd-eb9494ebb284eab7b8-ebaaa8eb939ceba19c-ejabberd-core-ebaaa8eb9388-ed858cec8aa4ed8ab8ed95b4-ebb3b4eab8b0/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jeidee.github.io/blog/2015/01/21/ejabberd-eb9494ebb284eab7b8-ebaaa8eb939ceba19c-ejabberd-core-ebaaa8eb9388-ed858cec8aa4ed8ab8ed95b4-ebb3b4eab8b0/</guid>
      <description>ejabberd를 실행한 상태에서 ejabberdctl의 debug 쉘을 사용해 실행 중인 ejabberd 노드에 접속해 core 모듈을 테스트해 볼 수 있다.
먼저 debug 쉘을 실행한다.
 ejabberdctl debug  ejabberd 모듈과 api를 확인하려면 ejabberd의 문서를 확인하거나 src 폴더의 .erl 소스파일을 열어 직접 확인해 볼 수 있다.
여러 모듈 중에서 인증 모듈을 사용해 유저가 존재하는지 여부를 체크해 보자.
(ejabberd@localhost)2&amp;gt; ejabberd\_auth:is\_user_exists(&amp;lt;&amp;lt;&amp;quot;test1&amp;quot;&amp;gt;&amp;gt;, &amp;lt;&amp;lt;&amp;quot;admin&amp;quot;&amp;gt;&amp;gt;). false (ejabberd@localhost)3&amp;gt; ejabberd\_auth:is\_user_exists(&amp;lt;&amp;lt;&amp;quot;test&amp;quot;&amp;gt;&amp;gt;, &amp;lt;&amp;lt;&amp;quot;admin&amp;quot;&amp;gt;&amp;gt;). true  위와 같이 테스트해 볼 수 있고, 실행 중인 ejabberd 노드의 상태를 모니터링하거나 dets/mnesia 테이블의 내용을 확인해 보기 위해 observer를 실행할 수 있다.</description>
    </item>
    
  </channel>
</rss>