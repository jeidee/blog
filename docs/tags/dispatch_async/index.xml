<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dispatch_async on Erlang &amp; Go</title>
    <link>http://jeidee.github.io/tags/dispatch_async/</link>
    <description>Recent content in Dispatch_async on Erlang &amp; Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 May 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jeidee.github.io/tags/dispatch_async/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ios 비동기로 이미지 다운로드</title>
      <link>http://jeidee.github.io/2015/05/19/ios-ebb984eb8f99eab8b0eba19c-ec9db4ebafb8eca780-eb8ba4ec9ab4eba19ceb939c/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jeidee.github.io/2015/05/19/ios-ebb984eb8f99eab8b0eba19c-ec9db4ebafb8eca780-eb8ba4ec9ab4eba19ceb939c/</guid>
      <description> 이미지캐시 클래스를 만들고 있는 과정인데 우선 비동기로 이미지를 다운로드 하는 코드를 작성해 보았다.
아직 캐시 기능은 구현하지 않았다.
ImageCache.h
#import &amp;lt;UIKit/UIKit.h&amp;gt; @interface ImageCache : NSObject +(ImageCache*)getInstance; -(void) loadFromUrl: (NSURL\*) url callback:(void (^)(UIImage \*image))callback; @end  ImageCache.m
#import &amp;lt;UIKit/UIKit.h&amp;gt; @interface ImageCache : NSObject +(ImageCache*)getInstance; -(void) loadFromUrl: (NSURL\*) url callback:(void (^)(UIImage \*image))callback; @end  사용
[[ImageCache getInstance] loadFromUrl:roster.photo callback:^(UIImage *image) { cell.imgAvatar.image = image; }];  참고  Loading an image into UIImage asynchronously iphone에서 메모리 문제로 URL로 데이터를 가끔씩 못 가져올 때 Disk Caching with AFNetworking UIImageView에 원격이미지 비동기 로드 및 캐쉬 기능 넣기  </description>
    </item>
    
    <item>
      <title>ios dispatch_async 비동기 처리하기</title>
      <link>http://jeidee.github.io/2015/05/18/ios-dispatch_async-ebb984eb8f99eab8b0-ecb298eba6aced9598eab8b0/</link>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jeidee.github.io/2015/05/18/ios-dispatch_async-ebb984eb8f99eab8b0-ecb298eba6aced9598eab8b0/</guid>
      <description>장시간을 요하는 작업을 UI 쓰레드에서 요청할 경우 UI 쓰레드가 블럭되기 때문에 사용자는 불편을 느끼게 된다.
이러한 경우, 별도의 쓰레드에서 작업을 수행 후 처리가 완료되면 UI 쓰레드로 결과를 돌려주는 방식(비동기)을 사용해야 한다.
android에서는 AsyncTask를 사용하면되고 ios의 경우에는 GCD(Grand Central Dispatch)를 사용하면 된다.
GCD 중에서 dispatch_async를 사용해 무거운 작업을 백그라운드 쓰레드에서 실행 후 실행완료된 결과를 UI쓰레드에서 처리하는 예제를 살펴보자.
mLoginView.hidden = YES; mActivityIndicator.hidden = NO; [mActivityIndicator startAnimating]; dispatch\_async(dispatch\_get\_global\_queue(DISPATCH\_QUEUE\_PRIORITY_DEFAULT, 0), ^{ bool success = TALK_CLIENT-&amp;gt;connect(jid, pwd, host, port); dispatch\_async(dispatch\_get\_main\_queue(), ^ { if (success) { [self performSegueWithIdentifier:@&amp;quot;moveFromLoginToTabBar&amp;quot; sender:nil]; } else { [mLbError setText:@&amp;quot;로그인 실패&amp;quot;]; mLoginView.</description>
    </item>
    
  </channel>
</rss>