<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Erlang &amp; Go</title>
    <link>https://jeidee.github.io/blog/categories/android/</link>
    <description>Recent content in Android on Erlang &amp; Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jun 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeidee.github.io/blog/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android.mk파일 사용해서 C&#43;&#43; 콘솔 응용프로그램 빌드 후 테스트</title>
      <link>https://jeidee.github.io/blog/2016/06/23/android-mked8c8cec9dbc-ec82acec9aa9ed95b4ec849c-c-ecbd98ec8694-ec9d91ec9aa9ed9484eba19ceab7b8eb9ea8-ebb98ceb939c-ed9b84-ed858cec8aa4ed8ab8/</link>
      <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2016/06/23/android-mked8c8cec9dbc-ec82acec9aa9ed95b4ec849c-c-ecbd98ec8694-ec9d91ec9aa9ed9484eba19ceab7b8eb9ea8-ebb98ceb939c-ed9b84-ed858cec8aa4ed8ab8/</guid>
      <description>목표 ndk-build를 사용해 안드로이드 C++ 콘솔 응용프로그램을 빌드 후 디바이스에 배포해서 실행 테스트한다.
디렉토리 구조 다음과 같은 구조를 갖도록 디렉토리와 빈 파일을 생성한다.
 ndktest (Dir) &amp;amp;#8212; jni (Dir) &amp;amp;#8212; Android.mk (File) &amp;amp;#8212; Application.mk (File) &amp;amp;#8212; hello.cpp (File)  hello.cpp  #include &amp;lt;iostream&amp;gt; using namespace std; int main() { cout &amp;lt;&amp;lt; &amp;quot;Hello, World!&amp;quot; &amp;lt;&amp;lt; endl; return 0; }  Application.mk stl을 사용하기 위해 다음과 같이 입력한다.
 APP\_STL := stlport\_static  Android.</description>
    </item>
    
    <item>
      <title>Android Studio 2.2 Preview3에서 Error:Conflict with dependency &amp;#8216;com.android.support:support-annotations&amp;#8217;. Resolved versions for app (23.1.1) and test app (22.2.1) differ. See http://g.co/androidstudio/app-test-app-conflict for details.</title>
      <link>https://jeidee.github.io/blog/2016/06/22/android-studio-2-2-preview3ec9790ec849c-errorconflict-with-dependency-com-android-supportsupport-annotations-resolved-versions-for-app-23-1-1-and-test-app-22-2-1-differ-see-httpg/</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2016/06/22/android-studio-2-2-preview3ec9790ec849c-errorconflict-with-dependency-com-android-supportsupport-annotations-resolved-versions-for-app-23-1-1-and-test-app-22-2-1-differ-see-httpg/</guid>
      <description>build.gradle(Module: app)에 다음을 추가한다.
 android { compileSdkVersion 22 buildToolsVersion &amp;quot;23.0.2&amp;quot; &amp;amp;#8230; configurations.all { resolutionStrategy { force &#39;com.android.support:support-annotations:23.1.1&#39; } } }   참고글  </description>
    </item>
    
    <item>
      <title>android orientation이 변경될 때 탭바의 아이콘이 없어질 때</title>
      <link>https://jeidee.github.io/blog/2015/05/12/android-orientationec9db4-ebb380eab2bdeb90a0-eb958c-ed83adebb094ec9d98-ec9584ec9db4ecbd98ec9db4-ec9786ec96b4eca788-eb958c/</link>
      <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/05/12/android-orientationec9db4-ebb380eab2bdeb90a0-eb958c-ed83adebb094ec9d98-ec9584ec9db4ecbd98ec9db4-ec9786ec96b4eca788-eb958c/</guid>
      <description> 최신 android 버전(API 22)에서는 문제가 없어 보이지만 특정 버전(API 16, Android 4.1.2)에서 아이콘이 사라지는 문제가 발생한다.
해결책은 AndriodManifest.xml에서 해당 Activity의 configChanges 어트리뷰트에서 orientation을 제거하면 되는데,
근본적인 해결책이라고 볼 순 없는 것 같다.
 &amp;lt;activity android:name=&amp;quot;.ui.MainActivity&amp;quot; &amp;lt;!&amp;amp;#8211;android:configChanges=&amp;quot;orientation|screenSize&amp;quot;&amp;amp;#8211;&amp;gt; android:label=&amp;quot;@string/app_name&amp;quot; &amp;gt; &amp;lt;/activity&amp;gt;  참고  Custom tab view vanishes after orientation change  </description>
    </item>
    
    <item>
      <title>android cannot load library error</title>
      <link>https://jeidee.github.io/blog/2015/05/04/android-cannot-load-library-error/</link>
      <pubDate>Mon, 04 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/05/04/android-cannot-load-library-error/</guid>
      <description>ndk build후 의존성 있는 .so 라이브러리를 일부 폰에서 로드하지 못할 경우 다음과 같이 수정해 본다.
static { System.loadLibrary(&amp;quot;gloox_lib&amp;quot;); System.loadLibrary(&amp;quot;msg_lib&amp;quot;); }  일부 폰(sdk 22)에서는 msg_lib만 로드하면 되지만, 일부 폰(sdk 16)에서는 msg_lib가 의존하는 gloox_lib를 로드하지 못하는 경우가 발생한다.
이럴 경우 위와 같이 의존성 있는 라이브러리를 함께 로드해주면 된다.</description>
    </item>
    
    <item>
      <title>android orientation이 변경될 때 감지하는 방법</title>
      <link>https://jeidee.github.io/blog/2015/05/04/android-orientationec9db4-ebb380eab2bdeb90a0-eb958c-eab090eca780ed9598eb8a94-ebb0a9ebb295/</link>
      <pubDate>Mon, 04 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/05/04/android-orientationec9db4-ebb380eab2bdeb90a0-eb958c-eab090eca780ed9598eb8a94-ebb0a9ebb295/</guid>
      <description>별도의 작업 없이는 orientation이 변경될 때 감지할 수 없다.
orientation 변경을 감지할 수 있는 방법은 다음과 같이 두 가지가 있다.
1) Activity에서 단순히 landscape와 portrait감지만 필요한 경우
감지할 Activity에서 onConfigurationChanged() 함수를 override한다.
@Override public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); // Checks the orientation of the screen if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) { Toast.makeText(this, &amp;quot;landscape&amp;quot;, Toast.LENGTH_SHORT).show(); } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){ Toast.makeText(this, &amp;quot;portrait&amp;quot;, Toast.LENGTH_SHORT).show(); } }  위와 같이 추가한 후 빌드해서 실행해보면 제대로 동작하지 않는다.</description>
    </item>
    
    <item>
      <title>android Circle Image View</title>
      <link>https://jeidee.github.io/blog/2015/05/02/android-circle-image-view/</link>
      <pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/05/02/android-circle-image-view/</guid>
      <description> ImageView를 round처리하거나 원형으로 처리하고자 할 때 사용할 수 있는 방법은 다음과 같다.
먼저 RoundedAvatarDrawable 클래스를 다운로드 받아 프로젝트에 추가한다.
레이아웃에 ImageView를 하나 추가한 후 Activity의 onCreate()함수 안에서 다음과 같이 코딩한다.
BitmapDrawable bImage = (BitmapDrawable) getResources().getDrawable(R.drawable.unnamed); ImageView mImg = (ImageView) mCustomView.findViewById(R.id.imageView1); mImg.setImageDrawable(new RoundedAvatarDrawable(bImage.getBitmap()));  참고  How can i use RoundedAvatarDrawable for creating round image? 효율적인 Bitmap 이미지 라운딩 처리 방법 네모난 비트맵을 둥글게 사용하기  </description>
    </item>
    
    <item>
      <title>android action bar를 커스텀 뷰로 대체하기</title>
      <link>https://jeidee.github.io/blog/2015/05/02/android-action-bareba5bc-ecbba4ec8aa4ed8580-ebb7b0eba19c-eb8c80ecb2b4ed9598eab8b0/</link>
      <pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/05/02/android-action-bareba5bc-ecbba4ec8aa4ed8580-ebb7b0eba19c-eb8c80ecb2b4ed9598eab8b0/</guid>
      <description> Action Bar에 버튼을 추가하거나 삭제하는 등의 편집을 위해서는 menu/menu_xxx.xml을 편집하면 된다.
조금 더 다양한 레이아웃을 사용하기 위해서는 커스텀 뷰를 만들어 사용해야 한다.
커스텀 뷰를 만들고 Action Bar의 높이 사이즈가 맞지 않을 경우 다음과 같이 styles.xml에 추가하도록 한다.
 &amp;lt;style name=&amp;quot;AppTheme&amp;quot; parent=&amp;quot;@android:style/Theme.Holo.Light&amp;quot;&amp;gt; &amp;lt;item name=&amp;quot;android:attr/actionBarSize&amp;quot;&amp;gt;120dp&amp;lt;/item&amp;gt; &amp;lt;/style&amp;gt;  참고  ActionBar with Custom View Example in Android Adding Action Button  </description>
    </item>
    
    <item>
      <title>android ndk에서 stringstream을 쓸 경우 __atomic_fetch_add_4 관련 링크 에러가 발생</title>
      <link>https://jeidee.github.io/blog/2015/04/29/android-ndkec9790ec849c-stringstreamec9d84-ec93b8-eab2bdec9ab0-__atomic_fetch_add_4-eab480eba0a8-eba781ed81ac-ec9790eb9faceab080-ebb09cec839d/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/04/29/android-ndkec9790ec849c-stringstreamec9d84-ec93b8-eab2bdec9ab0-__atomic_fetch_add_4-eab480eba0a8-eba781ed81ac-ec9790eb9faceab080-ebb09cec839d/</guid>
      <description> Android.mk에 다음과 같이 추가한다.
 LOCAL_LDLIBS += -latomic  출처  Android NDK STL c++_shared w/LIBCXX_FORCE_REBUILD results in std::stringstream NOP  </description>
    </item>
    
    <item>
      <title>android ndk c&#43;&#43; 코드에서 java object 생성해서 Parameter로 넘기기</title>
      <link>https://jeidee.github.io/blog/2015/04/27/android-ndk-c-ecbd94eb939cec9790ec849c-java-object-ec839dec84b1ed95b4ec849c-parametereba19c-eb8498eab8b0eab8b0/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/04/27/android-ndk-c-ecbd94eb939cec9790ec849c-java-object-ec839dec84b1ed95b4ec849c-parametereba19c-eb8498eab8b0eab8b0/</guid>
      <description>java 클래스에 다음과 같은 staic 메소드가 있다.
public class MsgClient { &amp;amp;#8230; public static void callbackRoster(RosterArray rosterArray) { &amp;amp;#8230; }  RosterArray는 다음과 같을 때,
import java.util.HashMap; public class RosterArray { private HashMap&amp;lt;String, Roster&amp;gt; m_rosters; public RosterArray() { m_rosters = new HashMap&amp;lt;String, Roster&amp;gt;(); } public void add(String jid, String name, int subscription) { if (m_rosters.containsKey(jid)) { Roster roster = m_rosters.get(jid); roster.SetRoster(jid, name, subscription); return; } Roster newRoster = new Roster(jid, name, subscription); m_rosters.</description>
    </item>
    
    <item>
      <title>android url에서 이미지를 비동기로 다운로드 받아 ImageView에 출력하기</title>
      <link>https://jeidee.github.io/blog/2015/04/27/android-urlec9790ec849c-ec9db4ebafb8eca780eba5bc-ebb984eb8f99eab8b0eba19c-eb8ba4ec9ab4eba19ceb939c-ebb09bec9584-imageviewec9790-ecb69ceba0a5/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/04/27/android-urlec9790ec849c-ec9db4ebafb8eca780eba5bc-ebb984eb8f99eab8b0eba19c-eb8ba4ec9ab4eba19ceb939c-ebb09bec9584-imageviewec9790-ecb69ceba0a5/</guid>
      <description>Custome List Adapter의 getView() 함수 안에서 다음과 같이 사용한다.
new DownloadImageTask(pView.GetIconView()).execute(roster.vcard().photo());  private class DownloadImageTask extends AsyncTask&amp;lt;String, Void, Bitmap&amp;gt; { ImageView bmImage; public DownloadImageTask(ImageView bmImage) { this.bmImage = bmImage; } protected Bitmap doInBackground(String&amp;amp;#8230; urls) { String urldisplay = urls[0]; Bitmap mIcon11 = null; try { InputStream in = new java.net.URL(urldisplay).openStream(); mIcon11 = BitmapFactory.decodeStream(in); } catch (Exception e) { Log.e(&amp;quot;Error&amp;quot;, e.getMessage()); e.printStackTrace(); } return mIcon11; } protected void onPostExecute(Bitmap result) { bmImage.</description>
    </item>
    
    <item>
      <title>android ndk jstring to char*(or std::string)</title>
      <link>https://jeidee.github.io/blog/2015/04/23/android-ndk-jstring-to-charor-stdstring/</link>
      <pubDate>Thu, 23 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/04/23/android-ndk-jstring-to-charor-stdstring/</guid>
      <description>string toString(JNIEnv* env, jstring in) { char* nativeStr; const char* temp = env-&amp;gt;GetStringUTFChars(in, 0); nativeStr = strdup(temp); env-&amp;gt;ReleaseStringUTFChars(in, temp); LOGD(&amp;quot;toString() %s&amp;quot;, nativeStr); return string(nativeStr); }  </description>
    </item>
    
    <item>
      <title>android ndk, native c/c&#43;&#43; 코드에서 java 코드 호출</title>
      <link>https://jeidee.github.io/blog/2015/04/22/android-ndk-native-cc-ecbd94eb939cec9790ec849c-java-ecbd94eb939c-ed98b8ecb69c/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/04/22/android-ndk-native-cc-ecbd94eb939cec9790ec849c-java-ecbd94eb939c-ed98b8ecb69c/</guid>
      <description>다음과 같이 두 가지 측면에서 접근할 수 있다.
 동일 쓰레드에서 jni call(java코드에서 native c/c++ 함수 호출)을 하고, 동일 스코프에서 java object의 함수를 호출하는 경우 호출측(java) 쓰레드와 콜백(native c/c++) 쓰레드가 다른 경우  동일 쓰레드에서 콜백 구현 java
package com.jeidee.glooxforandroid; public TestClient { public native callbackTest(); public void testCallback(String param) { Log.d(&amp;quot;JNI&amp;quot;, param); } }  native c++
include &amp;quot;com\_jeidee\_glooxforandroid_NativeCall.h&amp;quot; #include &amp;quot;client.h&amp;quot; JNIEXPORT void JNICALL Java\_com\_jeidee\_glooxforandroid\_NativeCall_callbackTest (JNIEnv *env, jobject obj) { static jmethodID cb = NULL; jclass cls = env-&amp;gt;GetObjectClass(obj); if (cb == NULL) { cb = env-&amp;gt;GetMethodID(cls, &amp;quot;testCallback&amp;quot;, &amp;quot;(Ljava/lang/String;)V&amp;quot;); if (cb == NULL) return; } env-&amp;gt;CallVoidMethod(obj, cb, env-&amp;gt;NewStringUTF(&amp;quot;call testCallback()&amp;quot;)); }  JNI함수인 callbackTest()를 호출한 java측 object에 testCallback(String) 함수가 있을 경우 위의 코드는 정상 동작한다.</description>
    </item>
    
    <item>
      <title>Android NDK에서 socket 사용</title>
      <link>https://jeidee.github.io/blog/2015/04/21/android-ndkec9790ec849c-socket-ec82acec9aa9/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/04/21/android-ndkec9790ec849c-socket-ec82acec9aa9/</guid>
      <description> AndroidMenifest.xml에 다음과 같이 추가한다.
 &amp;lt;uses-permission android:name=&amp;quot;android.permission.INTERNET&amp;quot; /&amp;gt; &amp;lt;application  주의할 것은 application 태그 위에 입력해야 한다는 것이다.
출처  Using Socket() in Android NDK  </description>
    </item>
    
    <item>
      <title>android native ndk에서 로깅하기</title>
      <link>https://jeidee.github.io/blog/2015/04/21/android-native-ndkec9790ec849c-eba19ceab985ed9598eab8b0/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/04/21/android-native-ndkec9790ec849c-eba19ceab985ed9598eab8b0/</guid>
      <description> 다음과 같이 선언하고 printf() 사용하듯이 사용하면 된다.
#include &amp;lt;android/log.h&amp;gt; #define LOG_TAG &amp;quot;someTag&amp;quot; #define LOGE(&amp;amp;#8230;) \_\_android\_log\_print(ANDROID\_LOG\_ERROR,LOG\_TAG,\\_\_VA\_ARGS\__) #define LOGW(&amp;amp;#8230;) \_\_android\_log\_print(ANDROID\_LOG\_WARN,LOG\_TAG,\\_\_VA\_ARGS\__) #define LOGD(&amp;amp;#8230;) \_\_android\_log\_print(ANDROID\_LOG\_DEBUG,LOG\_TAG,\\_\_VA\_ARGS\__) #define LOGI(&amp;amp;#8230;) \_\_android\_log\_print(ANDROID\_LOG\_INFO,LOG\_TAG,\\_\_VA\_ARGS\__)  출처  Logging values of variables in Android native ndk  </description>
    </item>
    
    <item>
      <title>gloox for android</title>
      <link>https://jeidee.github.io/blog/2015/04/21/gloox-for-android/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeidee.github.io/blog/2015/04/21/gloox-for-android/</guid>
      <description>gloox를 android에서 사용하기 위한 과정을 살펴보자.
사전 준비 작업 다음과 같은 환경이 구축되어 있다고 가정한다.
 개발 환경 : Mac OS X Yosemite 10.10.3 Android Studio : 1.1.0  Android SDK 경로는 ~/Android/sdk로 변경  NDK  ~/Android/ndk에 복사하고 path 지정   Android Studio에 ndk 설정 Preference &amp;gt; External Tools에서 + 버튼을 클릭해 javah, ndk-build, ndk-build clean 도구를 추가한다.
1) javah
2) ndk-build
3) ndk-build clean
Android Project 생성후 NDK 테스트 1) GlooxForAndroid 이름을 갖는 Android Project를 생성한다.</description>
    </item>
    
  </channel>
</rss>